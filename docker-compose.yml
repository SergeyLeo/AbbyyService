version: '3.5'
services:
  nginx-ps:
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
      args:
        UID: ${UID}
        CONFIG: local.conf
      target: base
    restart: always
    ports:
      - ${NGINX_HTTP_PORT}:80
    volumes:
      - ./public:/var/www/html/public:ro
    depends_on:
      - php-ps-fpm
    networks:
      - cofi-ps-network
      - local
    healthcheck:
      test: curl -f http://localhost/healthcheck
      timeout: 5s
  php-ps-fpm:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
      args:
        UID: ${UID}
        PHP_INI: php-xdebug.ini
      target: fpm_xdebug
    environment:
      XDEBUG_CONFIG: "remote_enable=1 remote_connect_back=1 remote_port=9008 remote_log=/var/www/html/storage/logs/xdebug.log idekey=PHPSTORM"
      PHP_IDE_CONFIG: "serverName=docker"
    restart: always
    volumes:
      - .:/var/www/html
    depends_on:
      - postgresql-ps
      - minio-ps-1
      - rabbit-ps
      - redis-ps
    networks:
      - cofi-ps-network
      - local
    healthcheck:
      test: cgi-fcgi -bind -connect 127.0.0.1:9000
      timeout: 5s
  php-worker-ps-once:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
      args:
        UID: ${UID}
      target: worker_ps_once
    restart: always
    volumes:
      - .:/var/www/html
    depends_on:
      - postgresql-ps
      - minio-ps-1
      - rabbit-ps
      - redis-ps
    networks:
      - cofi-ps-network
      - local
  php-worker-ps-repeat:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
      args:
        UID: ${UID}
      target: worker_ps_repeat
    restart: always
    volumes:
      - .:/var/www/html
    depends_on:
      - postgresql-ps
      - minio-ps-1
      - rabbit-ps
      - redis-ps
    networks:
      - cofi-ps-network
      - local
  as-postgresql:
    image: 'bitnami/postgresql:latest'
    restart: always
    ports:
      - 15432:5432
    environment:
      TZ: "Europe/Moscow"
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
    volumes:
      # /docker-entrypoint-initdb.d точка в которой могут быть запущены пользовательские скрипты. Когда контейнер выполнен первый раз
      - as-postgres-strg:/bitnami/postgresql
    networks:
      - as-network-strg
    healthcheck:
      test: pg_isready -q -d ${POSTGRESQL_DATABASE} -U ${POSTGRESQL_USERNAME}
      timeout: 12s
  as-redis:
    image: bitnami/redis:latest
    restart: always
    volumes:
      - as-redis-strg:/bitnami/redis/data
    networks:
      - as-network-strg
    healthcheck:
      test: redis-cli PING
      timeout: 7s
  # fixme
  as-cron:
    build:
      context: .
      dockerfile: ./docker/cron/Dockerfile
      target: base
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/cron/config.json:/opt/crontab/config.json:rw
    networks:
      - cofi-ps-network
    depends_on:
      - php-worker-ps-repeat

volumes:
  as-mongo-strg:
  as-redis-strg:
  as-postgres-strg:

networks:
  as-network-strg:
    name: as-strg-network
    attachable: true
  as-network-cache:
    name: as-network-cache
    attachable: true